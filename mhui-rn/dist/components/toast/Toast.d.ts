import { Component } from 'react';
import RootSiblings from 'react-native-root-siblings';
declare class Toast extends Component {
    static displayName: string;
    static propTypes: {
        containerStyle: import("prop-types").Validator<import("react-native").StyleProp<import("react-native").ViewStyle>> | undefined;
        duration: import("prop-types").Requireable<number>;
        visible: import("prop-types").Requireable<boolean>;
        position: import("prop-types").Requireable<number>;
        animation: import("prop-types").Requireable<boolean>;
        shadow: import("prop-types").Requireable<boolean>;
        keyboardAvoiding: import("prop-types").Requireable<boolean>;
        backgroundColor: import("prop-types").Requireable<string>;
        opacity: import("prop-types").Requireable<number>;
        shadowColor: import("prop-types").Requireable<string>;
        textColor: import("prop-types").Requireable<string>;
        textStyle: any;
        delay: import("prop-types").Requireable<number>;
        hideOnPress: import("prop-types").Requireable<boolean>;
        onHide: FunctionConstructor;
        onHidden: FunctionConstructor;
        onShow: FunctionConstructor;
        onShown: FunctionConstructor;
        onPress: FunctionConstructor;
        hitSlop?: import("prop-types").Validator<import("react-native").Insets | undefined> | undefined;
        onLayout?: import("prop-types").Validator<((event: import("react-native").LayoutChangeEvent) => void) | undefined> | undefined;
        pointerEvents?: import("prop-types").Validator<"auto" | "none" | "box-none" | "box-only" | undefined> | undefined;
        removeClippedSubviews?: import("prop-types").Validator<boolean | undefined> | undefined;
        style?: import("prop-types").Validator<import("react-native").StyleProp<import("react-native").ViewStyle>> | undefined;
        testID?: import("prop-types").Validator<string | undefined> | undefined;
        nativeID?: import("prop-types").Validator<string | undefined> | undefined;
        collapsable?: import("prop-types").Validator<boolean | undefined> | undefined;
        needsOffscreenAlphaCompositing?: import("prop-types").Validator<boolean | undefined> | undefined;
        renderToHardwareTextureAndroid?: import("prop-types").Validator<boolean | undefined> | undefined;
        shouldRasterizeIOS?: import("prop-types").Validator<boolean | undefined> | undefined;
        isTVSelectable?: import("prop-types").Validator<boolean | undefined> | undefined;
        hasTVPreferredFocus?: import("prop-types").Validator<boolean | undefined> | undefined;
        tvParallaxProperties?: import("prop-types").Validator<import("react-native").TVParallaxProperties | undefined> | undefined;
        tvParallaxShiftDistanceX?: import("prop-types").Validator<number | undefined> | undefined;
        tvParallaxShiftDistanceY?: import("prop-types").Validator<number | undefined> | undefined;
        tvParallaxTiltAngle?: import("prop-types").Validator<number | undefined> | undefined;
        tvParallaxMagnification?: import("prop-types").Validator<number | undefined> | undefined;
        onStartShouldSetResponder?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponder?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderEnd?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderGrant?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderReject?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderMove?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderRelease?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderStart?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderTerminationRequest?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderTerminate?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onStartShouldSetResponderCapture?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponderCapture?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onTouchStart?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchMove?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEnd?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchCancel?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEndCapture?: import("prop-types").Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        accessible?: import("prop-types").Validator<boolean | undefined> | undefined;
        accessibilityActions?: import("prop-types").Validator<readonly Readonly<{
            name: import("react-native").AccessibilityActionName;
            label?: string | undefined;
        }>[] | undefined> | undefined;
        accessibilityLabel?: import("prop-types").Validator<string | undefined> | undefined;
        accessibilityRole?: import("prop-types").Validator<"search" | "link" | "none" | "checkbox" | "radio" | "button" | "text" | "menu" | "menubar" | "menuitem" | "progressbar" | "tab" | "toolbar" | "scrollbar" | "header" | "summary" | "image" | "switch" | "keyboardkey" | "adjustable" | "imagebutton" | "alert" | "combobox" | "radiogroup" | "spinbutton" | "tablist" | "timer" | undefined> | undefined;
        accessibilityStates?: import("prop-types").Validator<import("react-native").AccessibilityStates[] | undefined> | undefined;
        accessibilityState?: import("prop-types").Validator<import("react-native").AccessibilityState | undefined> | undefined;
        accessibilityHint?: import("prop-types").Validator<string | undefined> | undefined;
        onAccessibilityAction?: import("prop-types").Validator<((event: import("react-native").AccessibilityActionEvent) => void) | undefined> | undefined;
        accessibilityComponentType?: import("prop-types").Validator<"none" | "button" | "radiobutton_checked" | "radiobutton_unchecked" | undefined> | undefined;
        accessibilityLiveRegion?: import("prop-types").Validator<"none" | "assertive" | "polite" | undefined> | undefined;
        importantForAccessibility?: import("prop-types").Validator<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
        accessibilityElementsHidden?: import("prop-types").Validator<boolean | undefined> | undefined;
        accessibilityTraits?: import("prop-types").Validator<"search" | "link" | "none" | "button" | "text" | "disabled" | "header" | "summary" | "image" | "key" | "adjustable" | "selected" | "plays" | "frequentUpdates" | "startsMedia" | "allowsDirectInteraction" | "pageTurn" | import("react-native").AccessibilityTrait[] | undefined> | undefined;
        accessibilityViewIsModal?: import("prop-types").Validator<boolean | undefined> | undefined;
        onAccessibilityEscape?: import("prop-types").Validator<(() => void) | undefined> | undefined;
        onAccessibilityTap?: import("prop-types").Validator<(() => void) | undefined> | undefined;
        onMagicTap?: import("prop-types").Validator<(() => void) | undefined> | undefined;
        accessibilityIgnoresInvertColors?: import("prop-types").Validator<boolean | undefined> | undefined;
    };
    static positions: {
        TOP: number;
        BOTTOM: number;
        CENTER: number;
    };
    static durations: {
        LONG: number;
        SHORT: number;
    };
    static show: (message: any, options?: {
        position: number;
        duration: number;
    }) => RootSiblings;
    static hide: (toast: any) => void;
    _toast: null;
    UNSAFE_componentWillMount: () => void;
    UNSAFE_componentWillReceiveProps: (nextProps: any) => void;
    componentWillUnmount: () => void;
    render(): null;
}
export { RootSiblings as Manager, };
export default Toast;
